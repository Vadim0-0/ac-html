@use 'sass:list';
@use 'sass:string';
@use 'sass:math';

@function transition-to-base($attr, $transition--default: $transition-base) {
  $_transition--default--property: null;
  $_transition--default--duration: null;
  $_transition--default--timing: null;

  @if ($_transition--default--property == null) {
    $_transition--default--property: transition-property(#{$transition--default});

    @if ($_transition--default--property == null) {
      $_transition--default--property: all;
    }
  }

  @if ($_transition--default--duration == null) {
    $_transition--default--duration: transition-duration(#{$transition--default});
    @if ($_transition--default--duration == null) {
      $_transition--default--duration: .2s;
    }
  }

  @if ($_transition--default--timing == null) {
    $_transition--default--timing: transition-timing(#{$transition--default});
    @if ($_transition--default--timing == null) {
      $_transition--default--timing: linear;
    }
  }

  $property: transition-property(#{$attr});
  @if ($property == null) {
    $property: $_transition--default--property;
  }

  $timing: transition-timing(#{$attr});
  @if ($timing == null) {
    $timing: $_transition--default--timing;
  }

  $duration: transition-duration(#{$attr});
  @if ($duration == null) {
    $duration: $_transition--default--duration;
  }

  @return #{$property} #{$duration} #{$timing};
}

@function transition-property($attr) {
  $parts: string.split(#{$attr}, ' ');

  $duration: transition-duration($attr);
  $timing: transition-timing($attr);

  @each $part in $parts {
    @if($part and $part != $duration and $part != $timing) {
      @return $part;
    }
  }

  @return null;
}

@function transition-duration($attr) {
  $options: ms, s;

  $parts: string.split(#{$attr}, ' ');
  @each $part in $parts {
    @if ($part) {
      @each $option in $options {
        @if (str-end-with($part, $option)) {
          $unit: $option;
          $val: string.slice($part, 0, string.length($part) - string.length($option));

          $val: to-number($part);

          @if ($val > 0) {
            @return #{$val}#{$unit};
          }
        }
      }
    }
  }

  @return null;
}

@function transition-timing($attr) {
  $options: linear,
    ease, "ease-in", "ease-out", "ease-in-out",
    "step-start", "step-end",
    "steps(", "cubic-";
//    inherit, initial, unset, revert, unset, "revert-layer";

  $parts: string.split(#{$attr}, ' ');
  @each $part in $parts {
    @if ($part) {
      @each $option in $options {
        @if (str-start-with($part, $option)) {
          @return $part;
        }
      }
    }
  }

  @return null;
}

// stylelint-disable property-disallowed-list
@mixin transition($transitions...) {
  $isNone: false;
  $isNull: false;
  $isAll: false;

  $resultTransitions: ();
  $resultWillChange: ();

  @if (list.length($transitions) == 0) {
    $resultTransitions: list.append($resultTransitions, $transition-base);
  }
  @else {
    @each $transation in $transitions {
      @if ($transation == null) {
        $isNull: true;
      }

      @else if ($transation == none and transition-property($transation) == none) {
        $isNone: true;
      }

      //

      @else {
        $value: transition-to-base($transation);
        $property: transition-property($transation);

        @if ($value) {
          $resultTransitions: list.append($resultTransitions, $value);

          @if ($property == all) {
            $isAll: $value;
          }
          @else {
            $resultWillChange: list.append($resultWillChange, $property);
          }
        }
      }
    }
  }

  @if $enable-transitions {
    @if ($isNull or list.length($resultTransitions) == 0) {
      transition: none;
    }
    @else {
      @if ($isNone) {
        transition: none;
        will-change: auto;
      }
      @else if($isAll) {
        transition: $isAll;
        will-change: auto;
      }
      @else {
        transition: implode($resultTransitions, ', ');
        will-change: implode($resultWillChange, ', ');

        @if $enable-reduced-motion {
          @media (prefers-reduced-motion: reduce) {
            transition: none;
            will-change: auto;
          }
        }
      }
    }
  }
}

@mixin transition-none() {
  @include transition(none);
}

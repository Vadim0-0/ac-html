@use 'sass:math';

@mixin text-format(
  $size, $size--sm: null,
  $line-height: null,
  $weight: null
) {
  @include rfs-adaptive('font-size', $size, $size--sm);

  @if ($weight) {
    @include font-weight($weight);
  }

  @if ($line-height != null) {
    line-height: rfs-value($line-height);
  }
}

@mixin icon-mask($url: null) {
  display: block;
  position: relative;
  text-indent: -9999px;

  &::before {
    @include position-fill();

    content: "";
    display: block;

    background: currentColor;
    mask-position: center center;
    mask-size: contain;
    mask-repeat: no-repeat;

    @if ($url) {
      mask-image: $url
    }
  }

  @include hover() {
    &::before {
    }
  }
}

@mixin rfs-adaptive($property, $value, $value--sm: null) {
  @include rfs($value, $property);

  @if ($value--sm) {
    @include media-breakpoint-down('sm') {
      #{$property}: rfs-value($value--sm);
    }
  }
}

@mixin tags-text() {
  h1,
  h2,
  h3,
  h4,
  h5,
  h6,
  p {
    @content;
  }
}

@mixin tags-header() {
  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    @content;
  }
}

@mixin browser-prefix($property, $value) {
  -webkit-#{$property}: #{$value};
  -moz-#{$property}: #{$value};
  -ms-#{$property}: #{$value};
  -o-#{$property}: #{$value};
  #{$property}: #{$value};
}

@mixin bg-img($url: null, $width: null, $height: null) {
  @include wh($width, $height);

  display: block;
  position: relative;
  text-indent: -9999px;

  &::before {
    @include position-fill(absolute);

    content: "";

    @include bg-img-elem($url);
  }
}

@mixin bg-img-elem($url: null, $width: null, $height: null) {
  display: block;
  background: none;
  background-position: 50% 50%;
  background-size: contain;
  background-repeat: no-repeat;

  @if ($url) {
    background-image: $url
  }

  -webkit-transform: translate3d(0, 0, 0);

  @if ($width or $height) {
    @include wh($width, $height);
  }
}

@mixin wh($width: null, $height: null, $ratio: null) {
  @if ($width == null and $height == null) {
  }
  @else if (
    $height == 0 or $height == null
  ) {
    @if (
      $ratio == 0 or $ratio == null
    ) {
      $height: $width;
    }
    @else {
      $height: math.div($width, $ratio);
    }
  }
  @else if(
    $width == 0 or $width == null
  ) {
    @if (
      $ratio == 0 or $ratio == null
    ) {
      $width: $height;
    }
    @else {
      $width: $height * $ratio;
    }
  }

  @if ($width) {
    width: rfs-value($width);
  }

  @if ($height) {
    height: rfs-value($height);
  }
}

@mixin position-fill(
  $position: 'absolute', // 'absolute', 'fixed'
  $offsetY: null,
  $offsetX: null,
) {
  @if ($offsetY != null and $offsetX == null) {
    $offsetX: $offsetY;
  }

  @if ($offsetY != null) {
    top: $offsetY;
    bottom: $offsetY;
  } @else {
    top: 0;
    bottom: 0;
  }

  @if ($offsetX != null) {
    left: $offsetX;
    right: $offsetX;
  } @else {
    left: 0;
    right: 0;
  }

  display: block;
  position: #{$position};
  width: auto;
  height: auto;
}

@mixin transparent-fill() {
  @include position-fill-absolute();
  background: transparent;
  text-indent: -9999px;
  opacity: 0;
}

@mixin position-fill-absolute(
  $offsetY: null,
  $offsetX: null,
) {
  @include position-fill('absolute', $offsetY, $offsetX);
}

@mixin transform($value) {
  transform: $value;
}

@mixin user-select($select) {
  -webkit-touch-callout: $select;
  user-select: $select;
}

@mixin placeholder() {
  &::placeholder {
    @content;
  }
}

@mixin font-type($type, $style: $default-font-size) {
  @if (map-has-key($style, $type)) {
    $st: map-get($style, $type);

    $line-height: 1.25;
    @if (map-has-key($st, 'height')) {
      $line-height: map-get($st, 'height');
    }

    @if (map-has-key($st, 'weight')) {
      @include font-weight(map-get($st, 'weight'));
    }

    @if (map-has-key($st, 'color')) {
      color: map-get($st, 'color');
    }

    @include rfs(map-get($st, 'size'), 'font-size');
    @include rfs($line-height, 'line-height');
  }
}

@mixin font($type, $style: null) {
  @if ($style == null) {
    $style: $default-font-size;
  }

  @include font-type($type, $style);
}

@mixin font-style($type) {
  @if ($type == 'i' or $type == 'italic') {
    font-style: italic;
  } @else if ($type == 'n' or $type == 'normal') {
    font-style: normal;
  } @else {
    font-style: normal;
  }
}

@mixin font-weight($type, $important: false) {
  $append: "";
  @if ($important == true) {
    $append: " !important";
  }

  @if ($type == 'l' or $type == 'light' or $type == 300) {
    font-weight: #{$font-weight-light}#{$append};
  }
  @else if ($type == 'r' or $type == 'regular' or $type == 'normal' or $type == 400) {
    font-weight: #{$font-weight-normal}#{$append};
  }
  @else if ($type == 'm' or $type == 'medium' or $type == 500) {
    font-weight: #{$font-weight-medium}#{$append};
  }
  @else if ($type == 'sb' or $type == 'semi-bold' or $type == 'semibold' or $type == 600) {
    font-weight: #{$font-weight-semibold}#{$append};
  }
  @else if ($type == 'b' or $type == 'bold' or $type == 700) {
    font-weight: #{$font-weight-bold}#{$append};
  }
  @else if ($type == 'eb' or $type == 'extra-bold' or $type == 'bolder' or $type == 800) {
    font-weight: #{$font-weight-bolder}#{$append};
  }
  @else if ($type == 'bl' or $type == 'black' or $type == 900) {
    font-weight: 900#{$append};
  }
  @else {
    font-weight: 400#{$append};
  }
}

@mixin position-absolute-center($w, $h: 0, $from_right: false, $from_bottom: false) {
  display: block;
  position: absolute;

  @if ($h == 0) {
    $h: $w;
  }

  @if ($from_bottom) {
    bottom: 50%;
  } @else {
    top: 50%;
  }

  @if ($from_right) {
    right: 50%;
  } @else {
    left: 50%;
  }

  @include wh($w, $h);

  margin: 0;
  margin-left: rfs-value(-1 * $w * .5);
  margin-top: rfs-value(-1 * $h * .5);
}

@mixin a-root($color-default: $link-color, $color-hover: $link-hover-color, $decoration: $link-decoration, $decoration-hover: $link-hover-decoration) {
  @include transition(color);

  &,
  &:visited {
    color: $color-default;
    @if ($decoration == 0) {
      text-decoration: none;
    } @else {
      text-decoration: underline;
    }
  }

  @include hover-focus() {
    color: $color-hover;

    @if ($decoration-hover == 0) {
      text-decoration: none;
    } @else {
      text-decoration: underline;
    }
  }

  @content;
}

@mixin a($color-default: $link-color, $color-hover: $link-hover-color, $decoration: $link-decoration, $decoration-hover: $link-hover-decoration) {
  & a {
    @include transition(color);

    &,
    &:visited {
      color: $color-default;
      @if ($decoration == 0) {
        text-decoration: none;
      } @else {
        text-decoration: underline;
      }
    }

    @include hover-focus() {
      color: $color-hover;

      @if ($decoration-hover == 0) {
        text-decoration: none;
      } @else {
        text-decoration: underline;
      }
    }

    @content;
  }
}

@mixin overflow-x($fade-width, $color-start: $body-bg, $color-end: $transparent) {
  position: relative;
  margin: 0;
  margin-left: rfs-value($fade-width * -1);
  margin-right: rfs-value($fade-width * -1);

  &::after,
  &::before {
    content: "";
    display: block;
    position: absolute;
    top: 0;
    bottom: 0;
    width: rfs-value($fade-width);
    z-index: 2;
  }

  &::before {
    background-image: linear-gradient(to right, $color-start, $color-end);
    left: 0;
  }

  &::after {
    background-image: linear-gradient(to left, $color-start, $color-end);
    right: 0;
  }

  & > ._overflow {
    position: relative;
    overflow: auto;
    z-index: 1;

    & > ._overflow_container {
      padding: 0 rfs-value($fade-width);
      width: fit-content;
    }
  }
}

@mixin overflow-y($fade-width, $color-start: $body-bg, $color-end: $transparent) {
  &::after,
  &::before {
    content: "";
    display: block;
    position: absolute;
    left: 0;
    right: 0;
    height: $fade-width;
    z-index: 2;
  }

  &::before {
    background-image: linear-gradient(to bottom, $color-start, $color-end);
    top: 0;
  }

  &::after {
    background-image: linear-gradient(to top, $color-start, $color-end);
    bottom: 0;
  }

  & > * {
    @include position-fill-absolute();

    overflow: auto;
    z-index: 1;
  }
}

@mixin margin-lr($gutter-sm, $gutter: 0, $margin: false) {
  @if ($gutter == 0) {
    $gutter: $gutter-sm;
  }

  margin: 0;
  margin-left: rfs-value($gutter-sm * 0.5 * -1);
  margin-right: rfs-value($gutter-sm * 0.5 * -1);

  @if ($gutter-sm != $gutter) {
    @include media-breakpoint-up('sm') {
      margin-left: rfs-value($gutter * 0.5 * -1);
      margin-right: rfs-value($gutter * 0.5 * -1);
    }
  }

  //& > div,
  & > li,
  & > * {
    max-width: 100%;

    @if ($margin) {
      margin-left: rfs-value($gutter-sm * 0.5);
      margin-right: rfs-value($gutter-sm * 0.5);
    }
    @else {
      padding-left: rfs-value($gutter-sm * 0.5);
      padding-right: rfs-value($gutter-sm * 0.5);
    }

    @if ($gutter-sm != $gutter) {
      @include media-breakpoint-up('sm') {
        @if ($margin) {
          margin-left: rfs-value($gutter * 0.5);
          margin-right: rfs-value($gutter * 0.5);
        }
        @else {
          padding-left: rfs-value($gutter * 0.5);
          padding-right: rfs-value($gutter * 0.5);
        }
      }
    }
  }

  @content;
}

@mixin flex-width($width: 0) {
  @if ($width == 0 or $width == '0') {
    flex-basis: 0;
    flex-grow: 1;
    flex-shrink: 0;
    //width: 100%;
    max-width: 100%;
    overflow: hidden;
  } @else if ($width == 'auto') {
    flex: 0 0 auto;
    flex-shrink: 1;
    width: auto;
    max-width: 100%;
  } @else if ($width == '100%') {
    flex: 0 0 100%;
    width: 100%;
    max-width: 100%;
  } @else {
    flex-basis: $width;
    flex-grow: 1;
    flex-shrink: 0;

    width: 100%;
    max-width: $width;
  }
}

@mixin list-disabled() {
  //font-size: 0;
  //line-height: 0;
  list-style: none;
  padding: 0;
  margin: 0;

  & > li {
    //@include font('p');
    margin: 0;
    padding: 0;
  }
}


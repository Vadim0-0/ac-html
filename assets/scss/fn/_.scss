@use "sass:list";
@use "sass:math";
@use "sass:string";
@use "sass:map";
@use "sass:color";

//

@function ratio($w, $h, $pow: 2) {
  $p: math.pow(10, $pow);

  $res: math.div(math.round(math.div($h, $w) * $p * 100), $p);
  $unit: '%';

  @return #{$res}#{$unit};
}

@function to-string($value) {
  @if ($value == null) {
    @return '';
  }

  @return #{$value};
}

@function str-end-with($string, $find) {
  $string: to-string($string);
  $find: to-string($find);

  @return
    string.length($string) >= string.length($find) and
    string.slice($string, (string.length($string) - string.length($find) + 1)) == $find;
}

@function str-start-with($string, $find) {
  $string: to-string($string);
  $find: to-string($find);

  @return
    string.length($string) >= string.length($find) and
    string.slice($string, 1, string.length($find)) == $find;
}

@function implode($list, $glue: ' ') {
  $l: list.length($list);

  $res: '';
  $i: 0;
  @each $value in $list {
    @if (string.length(#{$value}) > 0) {
      $res: $res + $value;

      $i: $i + 1;
      @if $i < $l {
        $res: $res + $glue;
      }
    }
  }
  @return #{$res};
}

@function map-get($map, $key) {
  @if (map.has-key($map, $key)) {
    @return map.get($map, $key);
  }

  @return null;
}

@function to-number($value) {
  @if type-of($value) == 'number' {
    @return $value;
  } @else if type-of($value) != 'string' {
    @error 'Value for `to-number` should be a number or a string.';
  }

  $result: 0;
  $digits: 0;
  $minus: str-slice($value, 1, 1) == '-';
  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);

  @for $i from if($minus, 2, 1) through str-length($value) {
    $character: str-slice($value, $i, $i);

    @if (index(map-keys($numbers), $character) or $character == '.') {
      @if $character == '.' {
        $digits: 1;
      } @else if $digits == 0 {
        $result: $result * 10 + map-get($numbers, $character);
      } @else {
        $digits: $digits * 10;
        $result: $result + math.div(map-get($numbers, $character), $digits);
      }
    }
  }

  @return if($minus, -$result, $result);
}

//
//
//

@function get_font_size($type, $style: $default-font-size) {
  @if (map_has_key($style, $type)) {
    $st: map_get($style, $type);

    @if (map_has_key($st, 'size')) {
      @return map_get($st, 'size');
    }
  }

  @return $font-size-base;
}

@function get_font_height($type, $style: $default-font-size) {
  $st: get_font_min_height($type, $style);

  @if($st == 0) {
    @return $line-height-base;
  }

  @return $st;
}

@function get_font_min_height($type, $style: $default-font-size) {
  @if (map_has_key($style, $type)) {
    $st: map_get($style, $type);

    @if (map_has_key($st, 'height')) {
      @return map_get($st, 'height');
    }

    @if (map_has_key($st, 'size')) {
      @return map_get($st, 'size') * $line-height-base;
    }
  }

  @return 0;
}

